
syntax of c
#include<stdio.h>
#-->pre processor directive. and .h-->headerfile and stdio-->standard input $ output.
we need to linked headerfile with pp.
void main()
main-->ek thara ka function hai.
void-->isme koi bhi value return nhi karega.
printf("  ");-->for output.[both are predefined function]
scanf(" ");-->for input.

1) PRE-PROCESSOR DIRECTIVE==>are lines included in a program that begin with characters # which makes them different from a typical source content.

2) COMPILER==> it scans the entire program first translate into machine code.
            compiler show all errors and warning at same time.
            debugging is slow.

3) INTERPRETER==> it scans the programs line by line and translate it into machine code.
               interpreter show one erroe at a time 
               debugging is slow

4) DATATYPES==>   1) PRIMARY                                   2) SECONDARY
                  *int-->(2 byte depend on compiler.)            *array
                  *char-->(1 byte)                               *pointer
                  *float-->(4 byte)                              *structure
                  *double float(8 byte)                          *union
                  *void(0 byte)

5) Clrscr()==>  REMOVE OLD OUTPUT FROM YOUR SCREEN.
             *int (%d)
             *float(%f)

6) VARIABLE==>  LOCAL VARIABLE-->local variable ko hum jitna bar use karenge uska utna bar new memory create hota hai.

             GLOBAL VARIABLE-->we can use any places for writing programme or in c langauge 
                               int a; // global
                               void main()
                               {}

             STATIC VARIABLE==>iska ek hi memeory banta hai jiska ki bar bar use kiya jata hai for ex-->printf() / or scanf().

getch()==>holds the screen.

7) IDENTIFIER==> identifiers refers to the name of  which is variable function and so on..
              for ex-->int a // a is identifiers 
8) PROGRAMME==> A program is a set of instruction that a computer follows in order to perform task.

9) OPERATORS==>operators is a symbols that tells the compiler to perform mathematical and logical task.

       *TYPES OF OPERATORS-->1) ARITHMETIC OPERATORS= +,-*/
                       2) RELATIONAL OPERATORS= we use for compare values >,< >=..
                       3) LOGICAL OPERATORS= &&,!,||.
                       4) INCREMENT/D ECREMENT=++,-- || 5)PRE-INCREMENT OR POST INCREMENT=++a,--a OR a++,a--.
                       5) TERNERY OPERATOR= (?,:)
                       6) ASSIGNMEN OPERATOR= (=)
* \n -->use only for print in next line.

10) CONDITIONAL  STATEMENTS:-
    *if statement
    *if else statement 
    *if else if statement 
    *Nested if statement 
    *switch statements

11) SWITCH STATEMENTS==>switch statements used when we want to select any one case out of multiple cases.
      *SYNTAX==> switch(exp)
                {
                  Case1: statement;
                         break;
                  case2: statements;
                         break;
12) Loops==> loop is used to express to repaeat a block of code until the given condition is true.
       *TYPES--> 1) WHILE LOOPS ==>phle condition check karega phr statement execute karta.-->isme pta hi hota kha tak jana hai.
                  2)DO-WHILE LOOPS==>phle statement execute karta phr cinditions check karta.
                  3)FOR LOOPS==>repeat block of code -->isme limit pata rhta hai kha tak jana hai.

13)ARRAY==> array is a collection of similar types of data items in a contigenous memory allocation.
       * []-->sub script operators .

14)STRINGS==>strings is a sequence collectio of characters and it always ends with null ('\0').

1)STREN()-->length of strings 
2)STRCPY()-->copy
3)STRCAT()-->merge
4)STRCMP()-->compare
5)STRLWR()-->lower case
6)STRUPR()-->upper case

*STRINGS (input/output)
gets()-->for input
puts()-->for output
 
POINTER-->pointer is a variable that can able to hold adress of another variable.

15) FUNCTION==>it is the block of code which takes input from the user and do some specific calculations and gives output.

    1)no argument and  no return value.
    2)no argument and  return value.
    3)argument    and  no return value.
    4)argument    and  return value.


 // functions:-)
      //[ no argument no return value.]

    /*  void sum(); // function declearation.
       void main()
      {
       sum();// function calling

      }
      void sum() //function defination.
      {
        int a,b,c;
        printf("enter the number= ");
        scanf("%d%d",&a,&b);
        c=a+b;
        printf("%d",c);


      }*/



      /*
      // [no argument no return value.]


      void table(); //function decleartion.
      int main()
      {

         table(); //function calling.


      }
      table() //function calling.define.
          int s,i,n;
          printf("enter the number= ");
          scanf("%d",&n); // n=9
         for(i=1;i<=10;i++)
         {
            s=n*i;
            printf("%d\n",s);
         }


      }*/



       //[no argument return value.]

      /* int sum(); // function declearation.
       void main()
      {
          int s;
       s=sum();// function calling.
       printf("%d",s);

      }
      int sum() //function define.
      {
        int a,b,c;
        printf("enter the number= ");
        scanf("%d%d",&a,&b);
        c=a+b;
        return c;
      }*/



      //[no argument return value.]


      /* int table(); //function decleartion.
      void main()
      {
          int m,i,s;
         m=table();  //function calling. //n=3

          for(i=1;i<=9;i++)
          {

         s=m*i;
         printf("%d\n",s);

          }


      }
      int table() // function define.
      {
         int s,n,i;
         printf("enter any number=  ");
         scanf("%d",&n);

         {
           return n; //3
         }

      }*/
    //[arugument and no return value.]


   /*void sum(int m,int n); //function declare.
   void main()
    {
     int m,n;
     sum(m,n); // function calling.
    }
    void sum(int m,int n) //function define.
    {
     int a,b,c;
     printf("enter the value= ");
     scanf("%d%d",&a,&b);
     c=a+b;
     printf("%d",c);
    }
    */



    //[arugument and return value.]


   int sum(int m,int n); //function declare.
   void main()
    {
     int m,n,x;
     x=sum(m,n); // function calling.
     printf(" addition= %d",x);
    }
     int  sum(int m,int n) //function define.
    {
     int a,b,c;
     printf("enter the value= ");
     scanf("%d%d",&a,&b);
     c=a+b;
    return c;

    }

16) ACTUAL PARAMETER AND FORMAL PARAMETER.==> ACTUAL PARAMTER MEANS VALUE OF THE PARAMETER  PASSES DURING CALLING THE FUNCTIONS AND FORMAL PARAMETER MEANS WHAT TYPPE OF VARIABLE PARAMTER  DURING DECLARE OF THE FUNCTION.
     [IF I CHANGE IN THE FORMAL PARAMETR ARGUMENT  ANY THING THEN THEY WOULD NOT AFFECT ON ACTUAL ARGUMENT VICE VERSA .]

*** --> arguemnt means value and parameter means jisse value pass horhi.
 
17) [CALL BY VALUE] => 1) in this case we are passing the value of the variable.x(a).
                     2) cant change the value of actual argument using formal argument.
                     3) no pointers are used.
                     4) its required more memory.
                     5) it is less efficient.

18) [CALL BY ADDRESS] => 1)in this case passing address of variable .x(&a).
                       2) cant change the value of actual argument using formal argument.
                       3) pointers are used.
                       4) its required more memory.
                       5) it is more effiecient.

19) [CALL BY REFERNCE] =>1) its passes the address of variable.
                         2)this actual value is modified because we change the address of the same variable.
                         3)its requires less memory.
                         4) it is more  efficient.

20)Printf it is a inbuilt library function which is declared in studio dots header file.
--1)The printer function is used to print any type of message and values on the console.
--2)We use print app function with format specifier lights % d % C  %s %f.
--3)We can also use a escapes sequence in printer function \n,\t.
--4)\t ==> space between value when you  print .

21)--1) it's kind of function it is a middle Library function which is declared in studio dot h header file
--2)Scanner function used to take input from the user
--3)In a scanner function must be used to format specifier like %d,%f,%c,%s.

21) String are actually one dimensional of any character which is terminated by null character this null character and this little character indicates and of these string.
He asked for null character is 0.
*REPRESENTATION OF STRING DECLERATION.
1)char str[6]={'H','E','L','L','O','\O'};
2)char str[]="HELLO";
3)charstr[20];
4)string pointer==>char *str="hello";

                         


  


                       


 
